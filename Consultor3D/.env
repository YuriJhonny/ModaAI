import express from "express";
import cors from "cors";
import dotenv from "dotenv";
import OpenAI from "openai";

dotenv.config();

const app = express();
app.use(cors());
app.use(express.json({ limit: "20mb" }));
app.use(express.static("public"));

const client = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY
});

// -------- Helpers --------
function buildImagePrompt(payload) {
  const {
    occasion,
    faceShape,
    skinTone,
    hairStyle,
    beard,
    shirtColor,
    pantsColor,
    notes
  } = payload;

  return `
Gere um retrato completo, estilo realista semi-ilustrado, de um personagem masculino em cenário neutro, focado de corpo inteiro, iluminação suave de estúdio.

Diretrizes visuais:
- Ocasião/estilo: ${occasion || "casual moderno"}.
- Formato de rosto: ${faceShape || "oval"}.
- Tom de pele: ${skinTone || "médio"}.
- Cabelo: ${hairStyle || "curto clássico"}${hairStyle?.toLowerCase() === "careca" ? " (sem cabelo)" : ""}.
- Barba: ${beard ? "sim, bem aparada" : "sem barba"}.
- Roupas: camisa/camiseta ${shirtColor || "preta"} e calça ${pantsColor || "jeans azul"}.
- Proporções naturais, expressão neutra amigável, postura relaxada.

Regras de composição:
- Fundo limpo com leve gradiente; personagem centralizado, sem texto.
- Alta qualidade, detalhes nítidos no tecido e cabelos, cores fiéis.

Observações extras do usuário: ${notes || "nenhuma"}.
`.trim();
}

// -------- Rotas --------

// Chat consultor (dicas de estilo/compras, etc.)
app.post("/consultor", async (req, res) => {
  try {
    const { message, context } = req.body || {};
    const system = `
Você é um consultor de moda e visual masculino.
Considere ocasião, formato de rosto, tom de pele, cabelo/barba e cores escolhidas.
Dê sugestões claras, baratas e acionáveis.
`;
    // Preferência atual: Responses API como primária; chat.completions também funciona.
    // Documentação oficial: API Responses e Images. 
    // (Refs: OpenAI docs: Responses e Chat; Images gpt-image-1) 
    const response = await client.chat.completions.create({
      model: "gpt-4o-mini",
      temperature: 0.7,
      messages: [
        { role: "system", content: system },
        { role: "user", content: `Contexto: ${JSON.stringify(context || {})}` },
        { role: "user", content: message || "Sugira um look equilibrado." }
      ]
    });
    const text = response.choices?.[0]?.message?.content?.trim() || "Não consegui gerar uma resposta.";
    res.json({ ok: true, text });
  } catch (err) {
    console.error(err);
    res.status(500).json({ ok: false, error: "Falha no consultor." });
  }
});

// Geração de imagem (gpt-image-1)
app.post("/generate-image", async (req, res) => {
  try {
    const payload = req.body || {};
    const prompt = buildImagePrompt(payload);

    const img = await client.images.generate({
      model: "gpt-image-1",
      prompt,
      size: "1024x1024"
    });

    const b64 = img.data?.[0]?.b64_json;
    if (!b64) return res.status(500).json({ ok: false, error: "Imagem não gerada." });

    res.json({ ok: true, imageBase64: b64, promptUsed: prompt });
  } catch (err) {
    console.error(err);
    res.status(500).json({ ok: false, error: "Falha ao gerar imagem." });
  }
});

// Servir index
app.get("/", (_req, res) => {
  res.sendFile(process.cwd() + "/public/index.html");
});

const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
  console.log(`Servidor no ar: http://localhost:${PORT}`);
});
